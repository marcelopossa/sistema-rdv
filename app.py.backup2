from flask import Flask, render_template, request, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from werkzeug.utils import secure_filename
import os
from datetime import datetime, date
import json
from utils.pdf_processor import processar_pdf, debug_pdf_content
from utils.excel_generator import gerar_excel_rdv
from utils.pdf_generator import gerar_pdf_completo


def processar_nfc_e(texto):
    """Processa texto de NFC-e e extrai informa√ß√µes relevantes - VERS√ÉO CORRIGIDA"""
    try:
        print(f"üîç Processando NFC-e...")
        print(f"üìÑ Amostra: {texto[:100]}...")
        
        # Extrair valor total - padr√µes mais robustos
        valor_patterns = [
            r'Valor total R\$\s*([\d.,]+)',
            r'VALOR TOTAL.*?R\$\s*([\d.,]+)',
            r'Total.*?R\$\s*([\d.,]+)'
        ]
        
        valor = 0
        for pattern in valor_patterns:
            valor_match = re.search(pattern, texto, re.IGNORECASE)
            if valor_match:
                valor_str = valor_match.group(1).replace('.', '').replace(',', '.')
                valor = float(valor_str)
                print(f"üí∞ Valor encontrado: R$ {valor:.2f}")
                break
        
        if valor == 0:
            print("‚ö†Ô∏è Valor total n√£o encontrado na NFC-e")
            return 0
        
        # Palavras-chave espec√≠ficas dos documentos do usu√°rio
        keywords_alimentacao = [
            # Nomes espec√≠ficos dos estabelecimentos
            'per tutti',           # Restaurante Per Tutti
            'rosa dos santos',     # Rosa dos Santos Rest
            # Tipos gerais
            'restaurante', 'rest ', 'rest.', 'rest,', 'restaurant',
            'lanchonete', 'padaria', 'pizzaria', 'hamburgueria',
            'confeitaria', 'pastelaria', 'churrascaria', 'cantina',
            # Caf√©s e bebidas
            'cafe', 'caf√©', 'coffee', 'bar ', 'pub', 'bistro',
            # Produtos/servi√ßos espec√≠ficos
            'refei√ß√£o', 'refeicao', 'buffet', 'comida', 'alimento',
            'bebida', 'diversos/bebidas', 'pizza', 'lanche',
            # Palavras em ingl√™s
            'food', 'meal', 'dinner', 'lunch', 'breakfast'
        ]
        
        texto_lower = texto.lower()
        
        # Verificar palavras-chave encontradas
        palavras_encontradas = []
        for keyword in keywords_alimentacao:
            if keyword in texto_lower:
                palavras_encontradas.append(keyword)
        
        if palavras_encontradas:
            print(f"‚úÖ ALIMENTA√á√ÉO identificada! Palavras: {palavras_encontradas}")
            print(f"üí∞ Valor de alimenta√ß√£o: R$ {valor:.2f}")
            return valor
        else:
            print(f"‚ÑπÔ∏è NFC-e n√£o classificada como alimenta√ß√£o")
            return 0
            
    except Exception as e:
        print(f"‚ùå Erro ao processar NFC-e: {e}")
        import traceback
        traceback.print_exc()
        return 0

# Configura√ß√£o da aplica√ß√£o
app = Flask(__name__)
app.config['SECRET_KEY'] = 'sistema-rdv-2025-seguro'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///rdv.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max

# Inicializar banco
db = SQLAlchemy(app)

# Criar pastas necess√°rias
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Modelos do banco de dados
class Cliente(db.Model):
    __tablename__ = 'cliente'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    valor_km = db.Column(db.Float, nullable=False)
    km_padrao = db.Column(db.Float, default=0)
    contato = db.Column(db.String(100))
    endereco = db.Column(db.String(200))
    observacoes = db.Column(db.Text)
    ativo = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    viagens = db.relationship('Viagem', backref='cliente', lazy=True)

    def to_dict(self):
        return {
            'id': self.id,
            'nome': self.nome,
            'valor_km': self.valor_km,
            'km_padrao': self.km_padrao,
            'contato': self.contato or '',
            'endereco': self.endereco or '',
            'observacoes': self.observacoes or ''
        }

class Viagem(db.Model):
    __tablename__ = 'viagem'
    
    id = db.Column(db.Integer, primary_key=True)
    data_viagem = db.Column(db.Date, nullable=False)
    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'), nullable=False)
    projeto = db.Column(db.String(100))
    participantes = db.Column(db.String(200), nullable=False)
    beneficiario = db.Column(db.String(100), default='MARCELO POSSA')
    
    km_rodado = db.Column(db.Float, nullable=False)
    valor_km = db.Column(db.Float, nullable=False)
    total_km = db.Column(db.Float, nullable=False)
    
    valor_pedagio = db.Column(db.Float, default=0)
    valor_alimentacao = db.Column(db.Float, default=0)
    valor_hospedagem = db.Column(db.Float, default=0)
    total_geral = db.Column(db.Float, nullable=False)
    
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def to_dict(self):
        return {
            'id': self.id,
            'data_viagem': self.data_viagem.strftime('%Y-%m-%d'),
            'cliente_nome': self.cliente.nome,
            'projeto': self.projeto or '-',
            'km_rodado': self.km_rodado,
            'total_geral': self.total_geral
        }

# Rotas da aplica√ß√£o
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/clientes', methods=['GET'])
def listar_clientes():
    try:
        clientes = Cliente.query.filter_by(ativo=True).all()
        return jsonify([cliente.to_dict() for cliente in clientes])
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/clientes', methods=['POST'])
def criar_cliente():
    try:
        data = request.json
        
        cliente = Cliente(
            nome=data['nome'],
            valor_km=float(data['valor_km']),
            km_padrao=float(data.get('km_padrao', 0)),
            contato=data.get('contato', ''),
            endereco=data.get('endereco', ''),
            observacoes=data.get('observacoes', '')
        )
        
        db.session.add(cliente)
        db.session.commit()
        
        return jsonify({'id': cliente.id, 'message': 'Cliente criado com sucesso!'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 400

@app.route('/api/clientes/<int:cliente_id>', methods=['PUT'])
def atualizar_cliente(cliente_id):
    try:
        cliente = Cliente.query.get_or_404(cliente_id)
        data = request.json
        
        cliente.nome = data['nome']
        cliente.valor_km = float(data['valor_km'])
        cliente.km_padrao = float(data.get('km_padrao', 0))
        cliente.contato = data.get('contato', '')
        cliente.endereco = data.get('endereco', '')
        cliente.observacoes = data.get('observacoes', '')
        
        db.session.commit()
        return jsonify({'message': 'Cliente atualizado com sucesso!'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 400

@app.route('/api/clientes/<int:cliente_id>', methods=['DELETE'])
def excluir_cliente(cliente_id):
    try:
        cliente = Cliente.query.get_or_404(cliente_id)
        cliente.ativo = False
        db.session.commit()
        return jsonify({'message': 'Cliente exclu√≠do com sucesso!'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 400

@app.route('/api/processar-documentos', methods=['POST'])
def processar_documentos():
    try:
        print("üöÄ Processamento de documentos iniciado")
        print("üìã Files received:", list(request.files.keys()))
        
        resultados = {
            'pedagio': 0,
            'alimentacao': 0,
            'hospedagem': 0,
            'arquivos_processados': []
        }
        
        # Debug detalhado dos arquivos
        total_files = 0
        for field_name in request.files:
            files = request.files.getlist(field_name)
            print("üìÅ Campo '{}': {} arquivo(s)".format(field_name, len(files)))
            for file in files:
                if file.filename:
                    print("   - {} ({})".format(file.filename, file.content_type))
                    total_files += 1
        
        print("üìä Total de arquivos v√°lidos:", total_files)
        
        # Processar cada tipo de arquivo COM PROCESSAMENTO REAL
        tipos_campos = {
            'pedagio': 'pedagioFile',
            'alimentacao': 'alimentacaoFiles',
            'hospedagem': 'hospedagemFiles'
        }
        
        for tipo, field_name in tipos_campos.items():
            files = request.files.getlist(field_name)
            print("\nüîÑ Processando {} arquivo(s) de {}".format(len(files), tipo))
            
            for file in files:
                if file and file.filename:
                    try:
                        # Salvar arquivo temporariamente
                        filename = secure_filename(file.filename)
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_')
                        safe_filename = timestamp + filename
                        filepath = os.path.join(app.config['UPLOAD_FOLDER'], safe_filename)
                        
                        file.save(filepath)
                        print("üíæ Arquivo salvo:", filepath)
                        
                        # PROCESSAR PDF REAL
                        print("üìÑ Iniciando extra√ß√£o de {} do arquivo: {}".format(tipo, filename))
                        valor_extraido = processar_pdf(filepath, tipo)
                        
                        # Somar ao total do tipo
                        resultados[tipo] += valor_extraido
                        
                        # Adicionar aos arquivos processados
                        resultados['arquivos_processados'].append({
                            'tipo': tipo,
                            'nome': filename,
                            'valor': valor_extraido,
                            'status': 'sucesso' if valor_extraido > 0 else 'valor_nao_encontrado'
                        })
                        
                        print("‚úÖ {}: R$ {:.2f}".format(filename, valor_extraido))
                        
                    except Exception as e:
                        print("‚ùå Erro ao processar {}: {}".format(file.filename, e))
                        import traceback
                        traceback.print_exc()
                        
                        resultados['arquivos_processados'].append({
                            'tipo': tipo,
                            'nome': file.filename,
                            'valor': 0,
                            'status': 'erro',
                            'erro': str(e)
                        })
        
        print("\nüéâ Processamento conclu√≠do!")
        print("üìä Resumo:")
        print("   - Ped√°gio: R$ {:.2f}".format(resultados['pedagio']))
        print("   - Alimenta√ß√£o: R$ {:.2f}".format(resultados['alimentacao']))
        print("   - Hospedagem: R$ {:.2f}".format(resultados['hospedagem']))
        
        return jsonify(resultados)
        
    except Exception as e:
        print("‚ùå Erro geral no processamento:", str(e))
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

@app.route('/api/viagens', methods=['POST'])
def criar_viagem():
    try:
        data = request.json
        
        total_km = float(data['km_rodado']) * float(data['valor_km'])
        total_geral = total_km + float(data['valor_pedagio']) + float(data['valor_alimentacao']) + float(data['valor_hospedagem'])
        
        viagem = Viagem(
            data_viagem=datetime.strptime(data['data_viagem'], '%Y-%m-%d').date(),
            cliente_id=int(data['cliente_id']),
            projeto=data.get('projeto', ''),
            participantes=data['participantes'],
            km_rodado=float(data['km_rodado']),
            valor_km=float(data['valor_km']),
            total_km=total_km,
            valor_pedagio=float(data['valor_pedagio']),
            valor_alimentacao=float(data['valor_alimentacao']),
            valor_hospedagem=float(data['valor_hospedagem']),
            total_geral=total_geral
        )
        
        db.session.add(viagem)
        db.session.commit()
        
        return jsonify({
            'id': viagem.id,
            'message': 'Viagem criada com sucesso!',
            'total_geral': total_geral
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 400

@app.route('/api/viagens', methods=['GET'])
def listar_viagens():
    try:
        viagens = Viagem.query.join(Cliente).order_by(Viagem.data_viagem.desc()).all()
        return jsonify([viagem.to_dict() for viagem in viagens])
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/test')
def test():
    return jsonify({
        'status': 'ok',
        'message': 'Sistema RDV funcionando!',
        'database': 'conectado'
    })


@app.route('/api/gerar-excel/<int:viagem_id>')
def gerar_excel_viagem(viagem_id):
    try:
        viagem = Viagem.query.get_or_404(viagem_id)
        
        print(f"üìä Gerando Excel para viagem {viagem_id}")
        filepath, filename = gerar_excel_rdv(viagem)
        
        if filepath and os.path.exists(filepath):
            return send_file(
                filepath,
                as_attachment=True,
                download_name=filename,
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
        else:
            return jsonify({'error': 'Erro ao gerar Excel'}), 500
            
    except Exception as e:
        print(f"‚ùå Erro na rota Excel: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/gerar-pdf/<int:viagem_id>')
def gerar_pdf_viagem(viagem_id):
    try:
        viagem = Viagem.query.get_or_404(viagem_id)
        
        print(f"üìÑ Gerando PDF para viagem {viagem_id}")
        filepath, filename = gerar_pdf_completo(viagem)
        
        if filepath and os.path.exists(filepath):
            return send_file(
                filepath,
                as_attachment=True,
                download_name=filename,
                mimetype='application/pdf'
            )
        else:
            return jsonify({'error': 'Erro ao gerar PDF'}), 500
            
    except Exception as e:
        print(f"‚ùå Erro na rota PDF: {e}")
        return jsonify({'error': str(e)}), 500

# Inicializa√ß√£o do banco
def init_db():
    try:
        print("üîÑ Verificando banco de dados...")
        
        # Criar todas as tabelas se n√£o existirem
        db.create_all()
        print("‚úÖ Banco de dados verificado!")
        
        # Verificar se j√° existem clientes
        count = Cliente.query.count()
        print("üìä Clientes existentes:", count)
        
        if count == 0:
            print("üîÑ Criando clientes padr√£o...")
            clientes_padrao = [
                Cliente(
                    nome='Conpasul',
                    valor_km=1.00,
                    km_padrao=226,
                    contato='contato@conpasul.com.br',
                    endereco='Porto Alegre, RS',
                    observacoes='Cliente padr√£o, viagens frequentes'
                ),
                Cliente(
                    nome='TechCorp',
                    valor_km=1.20,
                    km_padrao=180,
                    contato='(51) 3333-4444',
                    endereco='S√£o Paulo, SP',
                    observacoes='Valor diferenciado para projetos especiais'
                )
            ]
            
            for cliente in clientes_padrao:
                db.session.add(cliente)
            
            db.session.commit()
            print("‚úÖ Clientes padr√£o criados com KM padr√£o!")
        else:
            print("‚úÖ Banco j√° possui dados!")
            
    except Exception as e:
        print("‚ùå Erro ao inicializar banco:", str(e))
        import traceback
        traceback.print_exc()
        return False
    return True

if __name__ == '__main__':
    with app.app_context():
        if init_db():
            print("üöÄ Iniciando Sistema RDV com processamento real...")
            app.run(host='0.0.0.0', port=5000, debug=True)
        else:
            print("‚ùå Falha na inicializa√ß√£o do banco!")
